apiVersion: apps/v1              # Define a vers√£o da API Kubernetes usada para este recurso (apps/v1 √© a mais usada para Deployments)
kind: Deployment                 # Tipo do objeto que estamos criando (Deployment, respons√°vel por gerenciar r√©plicas de Pods)
metadata:                        # Metadados do recurso (informa√ß√µes de identifica√ß√£o)
  name: flask-app-deployment     # Nome do Deployment (usado para refer√™ncia no cluster)
spec:                            # Especifica√ß√£o do Deployment (define o comportamento desejado)
  replicas: 4                    # N√∫mero de r√©plicas (pods) que devem estar rodando simultaneamente
  selector:                      # Define como o Deployment identifica os Pods que ele gerencia
    matchLabels:                 # Crit√©rio de sele√ß√£o baseado em labels
      app: flask-app             # Seleciona todos os Pods que tenham a label "app: flask-app"
  template:                      # Modelo usado para criar os Pods
    metadata:                    # Metadados do Pod que ser√° criado
      labels:                    # Labels aplicadas aos Pods (devem casar com o selector acima)
        app: flask-app           # Label "app: flask-app" aplicada em cada Pod
    spec:                        # Especifica√ß√£o dos containers dentro do Pod
      containers:                # Lista de containers que o Pod ter√° (neste caso, apenas 1)
        - name: flask            # Nome do container dentro do Pod
          image: leonardotrevisol/flask-kub-project:latest   # Imagem Docker usada para rodar o container
          
# üí° Como rodar este Deployment em modo declarativo:
# 1. Salve este conte√∫do em um arquivo, por exemplo: deployment.yaml
# 2. Aplique o arquivo no cluster Kubernetes com:
#       kubectl apply -f deployment.yaml
# 3. Verifique se os pods foram criados:
#       kubectl get pods
# 4. Para expor a aplica√ß√£o via Service (LoadBalancer, NodePort ou ClusterIP):
#       kubectl expose deployment flask-app-deployment --type=LoadBalancer --port=5000
# 5. Confira o Service criado:
#       kubectl get services
#
# üîπ Explica√ß√£o:
# - `kubectl apply -f deployment.yaml` diz ao Kubernetes para criar ou atualizar o Deployment
#   de acordo com o estado desejado definido no arquivo YAML.
# - O Deployment garante que sempre haver√° o n√∫mero de r√©plicas definido (neste caso 4).
# - O Service exp√µe os pods de forma est√°vel para acesso externo ou interno, permitindo
#   que os clientes alcancem a aplica√ß√£o sem precisar se preocupar com pods ef√™meros.
