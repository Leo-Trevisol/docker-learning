# Define a vers√£o do formato do Docker Compose.
version: "3.8"

services:
  web:
    image: nginx:latest
    deploy:
      replicas: 3
    ports:
      - "8080:80"
    networks:
      - minha-rede

  db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: example
    deploy:
      replicas: 1
    networks:
      - minha-rede

networks:
  minha-rede:
    driver: bridge

# ==============================================================
# üìù Instru√ß√µes de uso no Docker Swarm
# ==============================================================

# 1Ô∏è‚É£ Inicializar o Swarm (se ainda n√£o estiver ativo):
#    docker swarm init

# 2Ô∏è‚É£ Criar a stack a partir deste docker-compose.yml:
#    docker stack deploy -c docker-compose.yml meuapp
#    -> "meuapp" ser√° o nome da stack (servi√ßos dentro dela ter√£o nomes tipo meuapp_web, meuapp_db)

# 3Ô∏è‚É£ Verificar servi√ßos rodando:
#    docker service ls
#    docker service ps meuapp_web
#    docker service ps meuapp_db

# 4Ô∏è‚É£ Escalar servi√ßos:
#    docker service scale meuapp_web=5
#    -> Swarm automaticamente cria/realoca containers entre nodes dispon√≠veis.

# 5Ô∏è‚É£ Remover a stack:
#    docker stack rm meuapp

# ==============================================================
# ‚ÑπÔ∏è Rela√ß√£o com Docker Swarm
# ==============================================================

# - O bloco "deploy" s√≥ √© usado pelo Swarm, n√£o pelo Compose normal.
# - Swarm garante que o n√∫mero de r√©plicas definido ser√° mantido.
# - Se algum node cair, o Swarm realoca containers automaticamente.
# - Voc√™ pode ter m√∫ltiplos nodes (manager e workers) e o servi√ßo "web" ser√° distribu√≠do entre eles.
# - O Swarm gerencia balanceamento de carga, alta disponibilidade e atualiza√ß√µes cont√≠nuas (rolling updates).
